AWSTemplateFormatVersion: '2010-09-09'

Description: ASG of Apache HTTP Server with ALB and CloudWatch Agent

Metadata:
  cfn-lint:
    config:
      ignore_checks:
      - W2509
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: System Classification
      Parameters:
      - pOrg
      - pSystem
      - pApp
    - Label:
        default: System Environment
      Parameters:
      - pEnvPurpose
    - Label:
        default: Network
      Parameters:
      - pVpcId
      - pAlbSubnetId1
      - pAlbSubnetId2
      - pWebSubnetId1
      - pWebSubnetId2
    - Label:
        default: Load Balancer
      Parameters:
      - pAlbScheme
      - pAlbIngressCidr
      - pAlbIngressPrefixListId
    - Label:
        default: Auto Scaling
      Parameters:
      - pServerCount
      - pAmiId
      - pInstanceType
    - Label:
        default: Permissions Boundary
      Parameters:    
      - pPermissionsBoundaryArn

    ParameterLabels:
      pEnvPurpose:
        default: Environment Purpose
      pOrg:
        default: Organization Identifier
      pSystem:
        default: System Identifier
      pApp:
        default: Application Identifier
      pVpcId:
        default: VPC ID
      pAlbSubnetId1:
        default: ALB Subnet ID 1
      pAlbSubnetId2:
        default: ALB Subnet ID 2
      pWebSubnetId1:
        default: Web Server Subnet ID 1
      pWebSubnetId2:
        default: Web Server Subnet ID 2
      pAlbScheme:
        default: Application Load Balancer (ALB) Scheme
      pAlbIngressCidr:
        default: Application Load Balancer (ALB) Allowed Ingress CIDR IP Range
      pAlbIngressPrefixListId:
        default: Application Load Balancer (ALB) Allowed Prefix List ID
      pServerCount:
        default: Number of EC2 Instances
      pInstanceType:
        default: EC2 Instance Type
      pAmiId:
        default: EC2 AMI ID
      pPermissionsBoundaryArn:
        default: IAM Permissions Boundary ARN (optional)

Parameters:
  pOrg:
    Type: String
    Description: Used to qualify resource names
    Default: example

  pSystem:
    Type: String
    Description: Used to qualify resource names
    Default: samples

  pApp:
    Type: String
    Description: Used to qualify resource names
    Default: http

  pEnvPurpose:
    Type: String
    Description: Used to qualify resource names. 10 characters max.
    AllowedPattern: '^[a-zA-Z0-9-_]{1,10}$'

  pVpcId:
    Description: ID of existing VPC
    Type: AWS::EC2::VPC::Id

  pAlbSubnetId1:
    Description: ID of 1 of 2 subnets in which ALB is to be deployed
    Type: AWS::EC2::Subnet::Id

  pAlbSubnetId2:
    Description: ID of 2 of 2 subnets in which ALB is to be deployed
    Type: AWS::EC2::Subnet::Id

  pWebSubnetId1:
    Description: ID or 1 or 2 subnets in which web server is to be deployed
    Type: AWS::EC2::Subnet::Id

  pWebSubnetId2:
    Description: ID or 3 or 2 subnets in which web server is to be deployed
    Type: AWS::EC2::Subnet::Id

  pAlbScheme:
    Description: ALB Scheme
    Type: String
    Default: internet-facing
    AllowedValues:
    - internal
    - internet-facing

  pAlbIngressCidr:
    Description: IP address range that can be used to access the ALB
    Type: String
    Default: ''

  pAlbIngressPrefixListId:
    Description: ID of the prefix list representing the service that can be used to access the ALB
    Type: String
    Default: ''

  pServerCount:
    Description: Number of Amazon EC2 instances to launch for the web server
    Type: Number
    Default: 1

  pAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs'

  pInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3a.micro
    AllowedValues:
      - t3a.micro
      - t3a.small
      - t3a.medium
    ConstraintDescription: must be a valid EC2 instance type.

  pPermissionsBoundaryArn:
    Description: IAM Permissions Boundary ARN (optional)
    Type: String
    Default: ''

Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC

Conditions:
  cAlbIngressUseCidr: !Not [!Equals [ !Ref 'pAlbIngressCidr', '' ] ]
  cAlbIngressUsePrefixListId: !Not [!Equals [ !Ref 'pAlbIngressPrefixListId', '' ] ]
  cUsePermissionsBoundary: !Not [!Equals [ !Ref 'pPermissionsBoundaryArn', '' ] ]

Resources:
  rAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${pSystem}-${pApp}-${pEnvPurpose}'
      Scheme: !Ref pAlbScheme
      SecurityGroups:
        - !Ref rAlbSecurityGroup
      Subnets:
        - !Ref pAlbSubnetId1
        - !Ref pAlbSubnetId2

  rAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${pSystem}-${pApp}-alb-${pEnvPurpose}'
      GroupDescription: HTTP Access from any location
      VpcId: !Ref pVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !If [ cAlbIngressUseCidr, !Ref pAlbIngressCidr, '0.0.0.0/0' ]
          SourcePrefixListId: !If [ cAlbIngressUsePrefixListId, !Ref pAlbIngressPrefixListId, !Ref 'AWS::NoValue' ]
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  rHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rAlb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref rTargetGroup

  rTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${pSystem}-${pApp}-${pEnvPurpose}'
      VpcId: !Ref pVpcId
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299

  rAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${pSystem}-${pApp}-${pEnvPurpose}'
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: !Ref pServerCount
      VPCZoneIdentifier:
        - !Ref pWebSubnetId1
        - !Ref pWebSubnetId2
      TargetGroupARNs:
        - !Ref rTargetGroup
      LaunchConfigurationName: !Ref rLaunchConfig
      Tags:
        - Key: Name
          Value: !Sub '${pSystem}-${pApp}-${pEnvPurpose}'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref pServerCount
        Timeout: PT10M

  rInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${pSystem}-${pApp}-ec2-${pEnvPurpose}'
      VpcId: !Ref pVpcId
      GroupDescription: Allow access via HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref rAlbSecurityGroup

  rLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Sub '${pSystem}-${pApp}-${pEnvPurpose}'
      InstanceType: !Ref pInstanceType
      ImageId: !Ref pAmiId
      IamInstanceProfile: !Ref rInstanceProfile
      SecurityGroups:
        - !Ref rInstanceSecurityGroup
      AssociatePublicIpAddress: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          yum install -y amazon-cloudwatch-agent

          /opt/aws/bin/cfn-init \
              --verbose \
              --stack ${AWS::StackName} \
              --resource rLaunchConfig \
              --configsets all \
              --region ${AWS::Region}

          /opt/aws/bin/cfn-signal \
              --exit-code $? \
              --stack ${AWS::StackName} \
              --resource rAsg \
              --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          all:
            - 00-config-cfn-hup
            - 01-config-cloudwatch-agent
            - 02-restart-cloudwatch-agent
            - 03-config-workload
          update-environment:
            - 01-config-cloudwatch-agent
            - 02-restart-cloudwatch-agent
        00-config-cfn-hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets update-environment
                runas=root
              mode: '000400'
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01-enable-cfn-hup:
              command: systemctl enable cfn-hup.service
            02-start-cfn-hup:
              command: systemctl start cfn-hup.service
        01-config-cloudwatch-agent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "metrics": {
                    "metrics_collected": {
                      "cpu": {
                        "resources": [
                          "*"
                        ],
                        "measurement": [
                          "usage_idle",
                          "usage_nice",
                          "usage_guest"
                        ],
                        "totalcpu": false,
                        "metrics_collection_interval": 10
                      },
                      "mem": {
                        "measurement": [
                          "total",
                          "used",
                          "used_percent"
                        ]
                      },
                      "swap": {
                        "measurement": [
                          "free",
                          "used",
                          "used_percent"
                        ]
                      },
                      "netstat": {
                        "measurement": [
                          "tcp_established",
                          "tcp_syn_sent",
                          "tcp_close"
                        ],
                        "metrics_collection_interval": 60
                      },
                      "disk": {
                        "measurement": [
                          "total",
                          "free",
                          "used",
                          "used_percent"
                        ],
                        "resources": [
                          "*"
                        ],
                        "drop_device": true
                      },  
                      "processes": {
                        "measurement": [
                          "running",
                          "sleeping",
                          "dead"
                        ]
                      }
                    },
                    "append_dimensions": {
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}",
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}"
                    },
                    "aggregation_dimensions" : [["AutoScalingGroupName"], ["InstanceId", "InstanceType"],[]]
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                            "log_group_name": "amazon-cloudwatch-agent.log",
                            "log_stream_name": "amazon-cloudwatch-agent.log",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/var/log/cloud-init.log",
                            "log_group_name": "${rCloudWatchLogsAgentGroup}",
                            "log_stream_name": "{instance_id}/cloud-init.log",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/var/log/cloud-init-output.log",
                            "log_group_name": "${rCloudWatchLogsAgentGroup}",
                            "log_stream_name": "{instance_id}/cloud-init-output.log",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/var/log/cfn-init.log",
                            "log_group_name": "${rCloudWatchLogsAgentGroup}",
                            "log_stream_name": "{instance_id}/cfn-init.log",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/var/log/cfn-wire.log",
                            "log_group_name": "${rCloudWatchLogsAgentGroup}",
                            "log_stream_name": "{instance_id}/cfn-wire.log",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/var/log/httpd/access_log",
                            "log_group_name": "${rCloudWatchLogsAgentGroup}",
                            "log_stream_name": "{instance_id}/apache_access_log",
                            "timezone": "UTC"
                          },
                          {
                            "file_path": "/var/log/httpd/error_log",
                            "log_group_name": "${rCloudWatchLogsAgentGroup}",
                            "log_stream_name": "{instance_id}/apache_error_log",
                            "timezone": "UTC"
                          }
                        ]
                      }
                    },
                    "log_stream_name": "${rCloudWatchLogsAgentGroup}",
                    "force_flush_interval" : 15
                  }
                }
              mode: '000444'
              owner: root
              group: root
        02-restart-cloudwatch-agent:
          commands:
            01-stop-service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02-start-service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        03-config-workload:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: |
                <h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>
              mode: '000644'
              owner: root
              group: root
          commands:
            01-modify-index-html:
              command: 'echo "<p>Served from $(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)" >> /var/www/html/index.html'
            02-enable-httpd:
              command: 'systemctl enable httpd.service'
            03-start-httpd:
              command: 'systemctl start httpd'

  rRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${pOrg}-${pSystem}-${pApp}-${pEnvPurpose}-svc-cloud-watch-ssm'
      Path: !Sub '/${pOrg}/${pSystem}/${pApp}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      PermissionsBoundary: !If [ cUsePermissionsBoundary, !Ref pPermissionsBoundaryArn, !Ref 'AWS::NoValue' ]
        
  rCloudWatchLogsAgentGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/${pSystem}/${pApp}/ec2/${pEnvPurpose}'
      RetentionInDays: 30

  rInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${pSystem}-${pApp}-${pEnvPurpose}'
      Path: !Sub '/${pOrg}/${pSystem}/${pApp}/'
      Roles:
        - !Ref rRole

Outputs:

  oUrl:
    Value: !GetAtt rAlb.DNSName
    Description: Newly created application URL