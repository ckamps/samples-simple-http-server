AWSTemplateFormatVersion: '2010-09-09'

Description: ASG of Apache HTTP Server with ALB and CloudWatch Agent

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Application Classification
      Parameters:
      - pOrg
      - pSystem
      - pApp
    - Label:
        default: Application Environment
      Parameters:
      - pEnvPurpose
    - Label:
        default: Network
      Parameters:
      - pVpcName
      - pAlbSubnetNameQualifier
      - pWebSubnetNameQualifier
    - Label:
        default: Auto Scaling
      Parameters:
      - pAlbScheme
      - pAlbIngressCidrIp
      - pServerCount
      - pInstanceType

    ParameterLabels:
      pEnvPurpose:
        default: Environment Purpose
      pOrg:
        default: Organization Identifier
      pSystem:
        default: System Identifier
      pApp:
        default: Application Identifier
      pVpcName:
        default: VPC Name
      pAlbSubnetNameQualifier:
        default: ALB Subnet Name Qualifier
      pWebSubnetNameQualifier:
        default: Web Server Subnet Name Qualifier
      pAlbScheme:
        default: Application Load Balancer (ALB) Scheme
      pAlbIngressCidrIp:
        default: Application Load Balancer (ALB) Allowed Ingress CIDR IP Range
      pServerCount:
        default: Number of EC2 Instances
      pInstanceType:
        default: EC2 Instance Type

Parameters:
  pOrg:
    Type: String
    Description: Used to qualify resource names
    Default: acme

  pSystem:
    Type: String
    Description: Used to qualify resource names
    Default: samples

  pApp:
    Type: String
    Description: Used to qualify resource names
    Default: http

  pEnvPurpose:
    Type: String
    Description: Used to qualify resource names. 10 characters max.
    AllowedPattern: '^[a-zA-Z0-9-_]{1,10}$'

  pVpcName:
    Description: Name of the existing VPC
    Type: String

  pAlbSubnetNameQualifier:
    Description: Name qualifier for subnet in which ALB is to be deployed
    Type: String
    Default: public

  pWebSubnetNameQualifier:
    Description: Name qualifier for subnet in which web server is to be deployed
    Type: String
    Default: private

  pAlbScheme:
    Description: ALB Scheme
    Type: String
    Default: internet-facing
    AllowedValues:
    - internal
    - internet-facing

  pAlbIngressCidrIp:
    Description: IP address range that can be used to access the ALB
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  pServerCount:
    Description: Number of Amazon EC2 instances to launch for the web server
    Type: Number
    Default: '1'

  pInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3a.micro
    AllowedValues:
      - t3a.micro
      - t3a.small
      - t3a.medium
    ConstraintDescription: must be a valid EC2 instance type.

Mappings:
  mAWSInstanceType2Arch:
    t3a.micro:
      Arch: HVM64
    t3a.small:
      Arch: HVM64
    t3a.medium:
      Arch: HVM64

  mAWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0c6b1d09930fac512
    us-west-1:
      HVM64: ami-015954d5e5548d13b
    us-west-2:
      HVM64: ami-0cb72367e98845d43

Resources:
  rAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${pSystem}-${pApp}-${pEnvPurpose}'
      Scheme: !Ref pAlbScheme
      SecurityGroups:
        - !Ref rAlbSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub '${pVpcName}-${pAlbSubnetNameQualifier}-subnet-id-1'
        - Fn::ImportValue: !Sub '${pVpcName}-${pAlbSubnetNameQualifier}-subnet-id-2'

  rAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${pSystem}-${pApp}-alb-${pEnvPurpose}'
      GroupDescription: HTTP Access from any location
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref pAlbIngressCidrIp
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId:
          Fn::ImportValue: !Sub '${pVpcName}-vpc-id'

  rHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rAlb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref rTargetGroup

  rTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${pSystem}-${pApp}-${pEnvPurpose}'
      VpcId:
          Fn::ImportValue: !Sub '${pVpcName}-vpc-id'
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299

  rAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${pSystem}-${pApp}-${pEnvPurpose}'
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: !Ref pServerCount
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${pVpcName}-${pWebSubnetNameQualifier}-subnet-id-1'
        - Fn::ImportValue: !Sub '${pVpcName}-${pWebSubnetNameQualifier}-subnet-id-2'
      TargetGroupARNs:
        - !Ref rTargetGroup
      LaunchConfigurationName: !Ref rLaunchConfig
      Tags:
        - Key: Name
          Value: !Sub '${pSystem}-${pApp}-${pEnvPurpose}'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref pServerCount
        Timeout: PT10M

  rInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${pSystem}-${pApp}-ec2-${pEnvPurpose}'
      VpcId:
          Fn::ImportValue: !Sub '${pVpcName}-vpc-id'
      GroupDescription: Allow access via HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref rAlbSecurityGroup

  rLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Sub '${pSystem}-${pApp}-${pEnvPurpose}'
      InstanceType: !Ref pInstanceType
      ImageId: !FindInMap
        - mAWSRegionArch2AMI
        - !Ref AWS::Region
        - !FindInMap
          - mAWSInstanceType2Arch
          - !Ref pInstanceType
          - Arch
      IamInstanceProfile: !Ref rInstanceProfile
      SecurityGroups:
        - !Ref rInstanceSecurityGroup
      AssociatePublicIpAddress: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap

          /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource rLaunchConfig \
              --configsets All \
              --region ${AWS::Region}

          /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource rAsg \
              --region ${AWS::Region}

    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureCloudWatchMetrics
            - ConfigureCloudWatchLogsAgent
            - ConfigureSampleWorkload
        ConfigureCloudWatchMetrics:
          packages:
            yum:
              perl-Switch: []
              perl-DateTime: []
              perl-Sys-Syslog: []
              perl-LWP-Protocol-https: []
              perl-Digest-SHA.x86_64: []
          sources:
            /home/ec2-user: >-
              https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip
          files:
            /home/ec2-user/crontab:
              content: !Sub |
                */1 * * * * ~/aws-scripts-mon/mon-put-instance-data.pl --aws-iam-role=${rRole} --mem-used --memory-units=megabytes --mem-util --disk-space-util --disk-space-used --disk-space-avail --disk-path=/
              mode: '000600'
              owner: ec2-user
              group: ec2-user
          commands:
            01_YumUpdateMonitoring:
              command: yum update -y
            02_MonitoringCron:
              command: >-
                chmod +x /home/ec2-user/aws-scripts-mon/*.pl && crontab -u
                ec2-user /home/ec2-user/crontab && rm /home/ec2-user/crontab
        ConfigureCloudWatchLogsAgent:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/state/agent-state

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/cloud-init.log
                datetime_format =

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format =

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format =

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/cfn-wire.log
                datetime_format =

                [/var/log/httpd/access_log]
                file = /var/log/httpd/access_log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/apache_access_log
                datetime_format =

                [/var/log/httpd/error_log]
                file = /var/log/httpd/error_log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/apache_error_log
                datetime_format =
              mode: '000444'
              owner: root
              group: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000444'
              owner: root
              group: root
          commands:
            create-awslogs-state-file:
              command: 'mkdir -p /var/awslogs/state'
            enable-awslogsd:
              command: 'systemctl enable awslogsd.service'
            start-awslogsd:
              command: 'systemctl start awslogsd'
        ConfigureSampleWorkload:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: |
                <h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>
              mode: '000644'
              owner: root
              group: root
          commands:
            modify-index-html:
              command: 'echo "<p>Served from $(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)" >> /var/www/html/index.html'
            enable-httpd:
              command: 'systemctl enable httpd.service'
            start-httpd:
              command: 'systemctl start httpd'

  rRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${pOrg}-${pSystem}-${pApp}-${pEnvPurpose}-svc-cloud-watch-ssm'
      Path: !Sub '/${pOrg}/${pSystem}/${pApp}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  rCloudWatchLogsAgentGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/${pSystem}/${pApp}/ec2/${pEnvPurpose}'
      RetentionInDays: 1

  rInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${pSystem}-${pApp}-${pEnvPurpose}'
      Path: !Sub '/${pOrg}/${pSystem}/${pApp}/'
      Roles:
        - !Ref rRole

Outputs:

  oUrl:
    Value: !GetAtt
      - rAlb
      - DNSName
    Description: Newly created application URL
